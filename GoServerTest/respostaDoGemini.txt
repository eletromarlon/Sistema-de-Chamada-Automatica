## Sistema Cliente-Servidor gRPC para Envio de Imagem e Resposta em Texto (Go)

**Objetivo:** Criar um sistema cliente-servidor gRPC em Go que permita ao cliente enviar uma imagem para o servidor e receber uma mensagem de texto em resposta, utilizando streaming bidirecional para otimizar a transferência de dados.

**Ferramentas:**

* Go
* Protoc
* gRPC

**Etapas:**

**1. Definir o Proto File:**

Crie um arquivo `imagem.proto` para definir a estrutura das mensagens que serão trocadas entre cliente e servidor:

```protobuf
syntax = "proto3";

package mensagem;

service ImagemService {
  rpc UploadImagem (stream ImagemRequest) returns (stream ImagemResposta);
}

message ImagemRequest {
  bytes imagem = 1;
}

message ImagemResposta {
  string mensagem = 1;
}
```

**2. Gerar Stub do Código:**

Utilize o `protoc` para gerar o código Go a partir do `imagem.proto`:

```bash
protoc -I=./ --go_out=./ imagem.proto
```

**3. Implementar o Servidor:**

Crie o arquivo `servidor.go` para implementar o servidor gRPC:

```go
package main

import (
    "context"
    "fmt"
    "log"
    "net"

    "github.com/golang/protobuf/proto"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"

    pb "mensagem"
)

type servidor struct{}

func (s *servidor) UploadImagem(stream pb.ImagemService_UploadImagemServer) error {
    var imagem []byte
    var mensagem string

    for {
        req, err := stream.Recv()
        if err == io.EOF {
            break
        }
        if err != nil {
            log.Printf("Erro ao receber imagem: %v", err)
            return status.Error(codes.Internal, "Erro interno do servidor")
        }

        imagem = req.Imagem

        // Processar a imagem (por exemplo, salvar em disco)

        mensagem = "Imagem recebida com sucesso!"

        res := &pb.ImagemResposta{Mensagem: mensagem}
        if err := stream.Send(res); err != nil {
            log.Printf("Erro ao enviar mensagem: %v", err)
            return status.Error(codes.Internal, "Erro interno do servidor")
        }
    }

    return nil
}

func main() {
    lis, err := net.Listen("tcp", ":50051")
    if err != nil {
        log.Fatalf("Erro ao criar listener: %v", err)
    }
    defer lis.Close()

    s := grpc.NewServer()
    pb.RegisterImagemServiceServer(s, &servidor{})

    log.Printf("Servidor iniciado na porta 50051")
    if err := s.Serve(lis); err != nil {
        log.Fatalf("Erro ao iniciar servidor: %v", err)
    }
}
```

**4. Implementar o Cliente:**

Crie o arquivo `cliente.go` para implementar o cliente gRPC:

```go
package main

import (
    "context"
    "fmt"
    "log"

    "github.com/golang/protobuf/proto"
    "google.golang.org/grpc"

    pb "mensagem"
)

func main() {
    conn, err := grpc.Dial(":50051", grpc.WithInsecure())
    if err != nil {
        log.Fatalf("Erro ao conectar com o servidor: %v", err)
    }
    defer conn.Close()

    cliente := pb.NewImagemServiceClient(conn)

    imagem := []byte{0, 1, 2, 3, 4, 5}

    stream, err := cliente.UploadImagem(context.Background())
    if err != nil {
        log.Fatalf("Erro ao iniciar stream: %v", err)
    }
    defer stream.Close()

    // Enviar imagem para o servidor
    req := &pb.ImagemRequest{Imagem: imagem}
    if err := stream.Send(req); err != nil {
        log.Printf("Erro ao enviar imagem: %v", err)
        return
    }

    // Receber mensagem do servidor
    res, err := stream.Recv